name "List Policy Templates"
rs_pt_ver 20180301
type "policy"
short_description "Lists all policy templates uploaded to the Flexera organization."
long_description ""
severity "low"
category "Tutorial"
default_frequency "weekly"
info(
  version: "0.6.0"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email Addresses"
  category "Policy Settings"
  description "A list of email addresses to notify."
  allowed_pattern /^([\w\.\-]+)@([\w\-]+)((\.(\w){2,24})+)$/
  default []
end

parameter "param_limit" do
  type "number"
  label "Result Limit"
  category "Policy Settings"
  description "Limit the number of results to return."
  min_value 1
  default 100
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_policy_lesson_list" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_engine_training/refs/heads/main/.data/lessons/lessons.xml"
  end
  result do
    encoding "xml"
    collect xpath(response, "//lessons/item", "array") do
      field "name", xpath(col_item, "name")
      field "lesson", xpath(col_item, "lesson")
    end
  end
end

datasource "ds_list_policy_templates" do
  request do
    run_script $js_list_policy_templates, "GET", rs_governance_host, rs_project_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "category", jmes_path(col_item, "category")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "short_description", jmes_path(col_item, "short_description")
    end
  end
end

script "js_list_policy_templates", type: "javascript" do
  parameters "verb", "rs_governance_host", "rs_project_id"
  result "request"
  code <<-'EOS'
  request = {
    auth: "auth_flexera",
    verb: verb,
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/policy_templates",
    headers: {
      "API-Version": "1.0"
    }
  }
EOS
end

datasource "ds_policy_templates_with_lessons" do
  run_script $js_policy_templates_with_lessons, $ds_policy_lesson_list, $ds_list_policy_templates, $param_limit
end

script "js_policy_templates_with_lessons", type: "javascript" do
  parameters "ds_policy_lesson_list", "ds_list_policy_templates", "param_limit"
  result "result"
  code <<-'EOS'
  policy_table = {}

  _.each(ds_policy_lesson_list, function(lesson) {
    policy_table[lesson['name']] = lesson['lesson']
  })

  policy_templates_with_lessons = _.map(ds_list_policy_templates, function(template) {
    return {
      category: template['category'],
      id: template['id'],
      name: template['name'],
      short_description: template['short_description'],
      lesson: policy_table[template['name']]
    }
  })

  result = _.filter(policy_templates_with_lessons, function(template) {
    return template['lesson']
  })

  result = result.slice(0, param_limit)
EOS
end

datasource "ds_policy_templates_with_created_at" do
  iterate $ds_policy_templates_with_lessons
  request do
    auth $auth_flexera
    verb "GET"
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/policy_templates/", val(iter_item, "id")])
    query "view", "extended"
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "category", val(iter_item, "category")
    field "id", val(iter_item, "id")
    field "name", val(iter_item, "name")
    field "short_description", val(iter_item, "short_description")
    field "lesson", val(iter_item, "lesson")
    field "policy_name", val($ds_applied_policy, "name")
    field "created_at", jmes_path(response, "created_at")
  end
end

###############################################################################
# Policy
###############################################################################

policy "pol_list_policy_templates" do
  validate_each $ds_policy_templates_with_created_at do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Policy Templates With Lessons Found"
    detail_template <<-'EOS'
![Flexera](https://github.com/flexera-public/policy_engine_training/blob/main/lessons/19_go_template/solution/flexera.png "Flexera")

## {{ len data }} Policy Templates Found

| ID | Name | Category | Lesson | Created At |
| -- | ---- | -------- | ------ | ---------- |
{{ range data -}}
  | {{ .id }} | {{ .name }} | {{ .category }} | {{ .lesson }} | {{ .created_at }} |
{{ end -}}
EOS
    check eq(val(item, "name"), "")
    escalate $esc_email
    hash_exclude "id"
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end
